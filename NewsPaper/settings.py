"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Start Django-environ
env = environ.Env(DEBUG=(bool, False))
# reading .env file
env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

# работают все варианты
# SECRET_KEY = 'django-insecure-w)1^3y^jxayh2t15-x#i8j_8504(r%y33z(=9ayw3&%6*l8(-f'
# SECRET_KEY = env('SECRET_KEY')
SECRET_KEY = os.getenv('SECRET_KEY')
# SECRET_KEY = os.environ['SECRET_KEY']

# print(env.ENVIRON)
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# беру из окружения, но там только текст, поэтому использую int,bool
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_USE_SSL = bool(os.getenv('EMAIL_USE_SSL'))

SITE_ID = 1

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.staticfiles',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',

    'django_apscheduler',
    #    'news',
    'news.apps.NewsConfig',
    'accounts',
    'sign',
    'protect',

    'django_filters',
]

SITE_URL = 'http://127.0.0.1:8000'

MIDDLEWARE = [
    #    'news.middleware.timing',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # 'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]
# LOGIN_URL = 'sign/login/'
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'

APSCHEDULER_DATETIME_FORMAT = 'N j, Y, f:s a'
# указывает за время (25 сек) за которое функция д.б. выполнена. Если интервал будет превышен, то функция будет прервана.
APSCHEDULER_RUN_NOW_TIMEOUT = 25

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

CELERY_BROKER_URL = 'redis://default:9mnCL6AVXg4InQF0CVBJ41kUYV4LVXjo@redis-19984.c304.europe-west1-2.gce.cloud.redislabs.com:19984'
CELERY_RESULT_BACKEND = 'redis://default:9mnCL6AVXg4InQF0CVBJ41kUYV4LVXjo@redis-19984.c304.europe-west1-2.gce.cloud.redislabs.com:19984'

CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'loggers': {
        'django': {
            'handlers': ['console_1_all', 'console_1_warning', 'console_1_er_cr', 'general'],
            'level': 'DEBUG'
        },

        'django.request': {
            'handlers': ['errors', 'mail_admins'],
            'level': 'ERROR'
        },
        'django.server': {
            'handlers': ['errors', 'mail_admins'],
            'level': 'ERROR'
        },
        'django.template': {
            'handlers': ['errors'],
            'level': 'ERROR'
        },
        'django.db.backends': {
            'handlers': ['errors'],
            'level': 'ERROR'
        },
        'django.db.security': {
            'handlers': ['security'],
            'level': 'INFO'
        },

    },
    'handlers': {
        'console_1_all': {
            'class': 'logging.StreamHandler',
            'formatter': 'task_1_all',
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
        },
        'console_1_warning': {
            'class': 'logging.StreamHandler',
            'formatter': 'task_1_warning',
            'level': 'WARNING',
            'filters': ['require_debug_true'],
        },
        'console_1_er_cr': {
            'class': 'logging.StreamHandler',
            'formatter': 'task_1_er_cr',
            'level': 'ERROR',
            'filters': ['require_debug_true'],
        },
        'general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'task_2',
            'filters': ['require_debug_false'],
        },
        'errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'task_3',
        },
        'security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'task_4',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'task_5',
            'filters': ['require_debug_false'],
        },

    },

    'formatters': {
        'task_1_all': {
            'format': '{asctime} {levelname} {message}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_1_warning': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_1_er_cr': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_2': {
            'format': '{asctime} {levelname} {module} {message}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_3': {
            'format': '{asctime} {levelname} {message} {pathname} {exc_info}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_4': {
            'format': '{asctime} {levelname} {module} {message}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
        'task_5': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'datetime': '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
}

ADMINS = [('Andrey', 'ankom225@gmail.com')]
